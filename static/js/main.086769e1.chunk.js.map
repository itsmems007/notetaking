{"version":3,"sources":["db.js","components/navbar.js","components/notes-list.js","pages/index.js","pages/new.js","pages/show.js","pages/edit.js","App.js","registerServiceWorker.js","index.js"],"names":["DB","name","this","db","PouchDB","allDocs","include_docs","allNotes","notes","rows","forEach","n","id","doc","note","createdAt","Date","updatedAt","post","res","put","remove","className","to","Note","_id","title","body","dayjs","format","renderDate","map","key","IndexPage","props","Object","values","sort","a","b","state","length","React","PureComponent","NewNotePage","saving","setState","onSave","history","replace","e","target","value","onSubmit","preventDefault","handleSave","type","onChange","updateValue","ShowPage","onClick","onDelete","dangerouslySetInnerHTML","__html","marked","EditNotePage","loading","App","getAllNotes","method","_rev","rev","window","confirm","deleteNote","exact","path","component","match","params","handleDelete","onsearch","handleSearch","renderContent","Component","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.086769e1.chunk.js","sourcesContent":["import PouchDB from 'pouchdb';\r\n\r\nexport default class DB {\r\n    constructor(name) {\r\n        this.db = new PouchDB('react-notes');\r\n    }\r\n\r\n    async getAllNotes() {\r\n        let allNotes = await this.db.allDocs({ include_docs: true });\r\n        let notes = {};\r\n        \r\n        allNotes.rows.forEach(n => notes[n.id] = n.doc);\r\n\r\n        return notes;\r\n    }\r\n\r\n    async createNote(note) {\r\n        note.createdAt = new Date();\r\n        note.updatedAt = new Date();\r\n\r\n        const res = await this.db.post({ ...note });\r\n\r\n        return res;\r\n    }\r\n\r\n    async updateNote(note) {\r\n        note.updatedAt = new Date();\r\n\r\n        const res = await this.db.put({ ...note });\r\n        return res;\r\n    }\r\n\r\n    async deleteNote(note) {\r\n        await this.db.remove(note);\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './navbar.css';\r\n\r\nexport default () => (\r\n    <nav className=\"navbar\">\r\n        <Link to=\"/\"><h1>ReactNotes</h1></Link>\r\n        <span className=\"navbar-buttons\">\r\n            <Link className=\"btn\" to=\"/new\"> + </Link>\r\n        </span>\r\n    </nav>\r\n)","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport dayjs from 'dayjs';\r\n\r\nimport './notes-list.css';\r\n\r\nfunction renderDate(updatedAt) {\r\n    let d = dayjs(updatedAt);\r\n    return d.format(\"MMMM D YYYY, HH:mm\");\r\n}\r\n\r\nconst Note = ({ note: { _id, title, body, updatedAt } }) => (\r\n    <div className=\"notes-list-item\">\r\n        <h2><Link to={`/notes/${_id}`}>{ title }</Link></h2>\r\n        <span className=\"notes-list-date\">\r\n            { renderDate(updatedAt) }\r\n        </span>\r\n    </div>\r\n);\r\n\r\nexport default ({ notes }) => (\r\n    <div className=\"notes-list\">\r\n        {notes.map(n => <Note note={n} key={`note-${n._id}`}/> )}\r\n    </div>\r\n);","import React from 'react';\r\nimport NotesList from '../components/notes-list';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass IndexPage extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let notes = Object.values(props.notes)\r\n        notes.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\r\n\r\n        this.state = { notes };\r\n    }\r\n\r\n    render() {\r\n        let { notes } = this.state;\r\n\r\n        if (!notes.length) {\r\n            return (\r\n                <div className=\"app-intro\">\r\n                    <h2>Welcome to ReactNotes</h2>\r\n                    <p>You don't have any notes. <Link className=\"btn\" to=\"/new\">Get started!</Link></p>\r\n                    <p>All notes you create will be stored right here, on your browser. No need to worry about logging in.</p>\r\n                    <p>This app also uses a ServiceWorker, so even if you're offline, you can still access and update your notes! And if your device supports it, you can save this page to your home screen and use it like any other app on your phone.</p>\r\n                    \r\n                    <hr/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h2>Notes</h2>\r\n                <NotesList notes={this.state.notes}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IndexPage;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport \"./form.css\";\r\n\r\nclass NewNotePage extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { \r\n            note: {\r\n                title: '',\r\n                body: '',\r\n                createdAt: null,\r\n                updatedAt: null\r\n            },\r\n            saving: false\r\n        }\r\n    }\r\n\r\n    async handleSave() {\r\n        this.setState({ saving: true });\r\n\r\n        const res = await this.props.onSave({ ...this.state.note });\r\n\r\n        this.props.history.replace(`/notes/${ res.id }`)\r\n    }\r\n\r\n    updateValue(e) {\r\n        let { note } = this.state;\r\n\r\n        this.setState({ note: { ...note, [e.target.name]: e.target.value }});\r\n    }\r\n\r\n    render() {\r\n        const { note } = this.state;\r\n\r\n        return (\r\n            <div className=\"note-form\">\r\n                <h1>New Note</h1>\r\n                <form onSubmit={(e) => { e.preventDefault(); this.handleSave(); }}>\r\n                    <div className=\"note-form-field\">\r\n                        <label>Title</label>\r\n                        <input type=\"text\" name=\"title\" value={note.title} onChange={(e) => this.updateValue(e)} />\r\n                    </div>\r\n                    <div className=\"note-form-field note-form-field-text\">\r\n                        <textarea name=\"body\" value={note.body} onChange={(e) => this.updateValue(e)} />\r\n                    </div>\r\n                    <div className=\"note-form-buttons\">\r\n                        <input type=\"submit\" value=\"Save\" />\r\n                        <Link to={`/`}>Cancel</Link>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewNotePage;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport marked from 'marked';\r\nimport dayjs from 'dayjs';\r\n\r\nimport \"./show.css\";\r\n\r\nclass ShowPage extends React.PureComponent {\r\n    renderDate() {\r\n        let d = dayjs(this.props.note.updatedAt)\r\n        return d.format(\"MMMM D YYYY, HH:mm\")\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (!this.props.note) {\r\n            this.props.history.replace(`/`);\r\n            return;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { note } = this.props;\r\n\r\n        if (!note) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h1>{ note.title }</h1>\r\n                <div className=\"note-created\">\r\n                    {this.renderDate()}\r\n                    <Link className=\"note-edit\" to={`/notes/${note._id}/edit`}>Edit</Link>\r\n                    <button className=\"btn\" onClick={ (e) => this.props.onDelete(note._id) }>Delete</button>\r\n                </div>\r\n                <div className=\"note-body\" dangerouslySetInnerHTML={ { __html: marked(note.body) } } />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ShowPage;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport \"./form.css\";\r\n\r\nclass EditNotePage extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            note: {\r\n                title: '',\r\n                body: '',\r\n                createdAt: null,\r\n                updatedAt: null\r\n            },\r\n            saving: false\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.setState({ note: {...this.props.note} });\r\n    }\r\n\r\n    async handleSave() {\r\n        this.setState({ saving: true });\r\n\r\n        const res = await this.props.onSave({ ...this.state.note });\r\n\r\n        this.props.history.replace(`/notes/${res.id}`)\r\n    }\r\n\r\n    updateValue(e) {\r\n        let { note } = this.state;\r\n\r\n        this.setState({ note: { ...note, [e.target.name]: e.target.value } });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return <h1>Loading...</h1>\r\n        }\r\n\r\n        const { note } = this.state;\r\n\r\n        return (\r\n            <div className=\"note-form\">\r\n                <h1>Edit Note</h1>\r\n                <form onSubmit={(e) => { e.preventDefault(); this.handleSave(); }}>\r\n                    <div className=\"note-form-field\">\r\n                        <label>Title</label>\r\n                        <input type=\"text\" name=\"title\" value={note.title} onChange={(e) => this.updateValue(e)} />\r\n                    </div>\r\n                    <div className=\"note-form-field note-form-field-text\">\r\n                        <textarea name=\"body\" value={note.body} onChange={(e) => this.updateValue(e)} />\r\n                    </div>\r\n                    <div className=\"note-form-buttons\">\r\n                        <input type=\"submit\" value=\"Save\" />\r\n                        <Link to={`/notes/${note._id}`}>Cancel</Link>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditNotePage;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport DB from './db';\n\nimport Navbar from './components/navbar';\nimport IndexPage from './pages/index';\nimport NewPage from './pages/new';\nimport ShowPage from './pages/show';\nimport EditPage from './pages/edit';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    let db = new DB();\n    this.state = { \n      db,\n      notes: [],\n      loading: true\n    };\n  }\n\n  async componentDidMount() {\n    const notes = await this.state.db.getAllNotes();\n\n    this.setState({\n      notes,\n      loading: false\n    });\n  }\n\n  async handleSave(note, method) {\n    let res = await this.state.db[method](note);\n    let { notes } = this.state;\n    \n    note._id = res.id;\n    note._rev = res.rev;\n\n    this.setState({\n      notes: { ...notes, [res.id]: note }\n    });\n\n    return res;\n  }\n\n  async handleDelete(id) {\n    let { notes } = this.state;\n    let note = notes[id];\n\n    if (notes[id] && window.confirm(\"Are you sure you want to delete this note?\")) {\n      await this.state.db.deleteNote(note);\n\n      delete notes[id];\n      \n      this.setState({ notes });\n    }\n  }\n\n  renderContent() {\n    if (this.state.loading) {\n      return <h2>Loading...</h2>\n    }\n\n    return (\n      <div className=\"app-content\">\n        <Route exact path=\"/\" component={(props) => <IndexPage {...props} notes={this.state.notes}/>} />\n        <Route exact path=\"/notes/:id\" component={(props) => (\n          <ShowPage {...props} note={this.state.notes[props.match.params.id]} onDelete={(id) => this.handleDelete(id) }/>\n          ) } />\n        <Route path=\"/notes/:id/edit\" component={(props) => (\n          <EditPage {...props} note={this.state.notes[props.match.params.id]} onSave={(note) => this.handleSave(note, 'updateNote') }/>\n          ) } />\n        <Route path=\"/new\" component={(props) => (\n          <NewPage {...props} onSave={(note) => this.handleSave(note, 'createNote')} />\n        )} />\n        <Route path=\"/new\" component={(props) => (\n          <search {...props} onsearch={(note) => this.handleSearch(note, 'search')} />\n        )} />\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navbar />\n          { this.renderContent() }\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}